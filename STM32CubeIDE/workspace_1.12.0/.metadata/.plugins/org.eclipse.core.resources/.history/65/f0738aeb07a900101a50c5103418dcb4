/*
 * user_code.c
 *
 *  Created on: oct. 21, 2022
 *      Author: Benoit Piranda
 */

#include <user_code.h>
#include <layer3_generic.h>
#include <microphone.h>
#include <speaker.h>
#include <light.h>
#include <abstraction.h>
#include <speaker.h>



void BBinit() {
	setColor(GREEN);
}


// Custom function to send a debug message about the blockâ€™s state
void send_debug_message() {
    char debug_msg[64];
    uint8_t connected_mask = 0;

    // Check which interfaces are connected
    for (uint8_t i = 0; i < 6; i++) {
        if (is_connected(i)) {
            connected_mask |= (1 << i);
        }
    }

    // Compose a short text message (state report)
    snprintf(debug_msg, sizeof(debug_msg),
             "BB state: color=BLUE, conn=0x%02X", connected_mask);

    // Send the debug message to all connected neighbors
    uint8_t sent_to = send_broadcast_message((uint8_t *)debug_msg,
                                             strlen(debug_msg) + 1, 1);

    // Print on serial console for debugging
    printf("%s (sent_to=0x%02X)\n", debug_msg, sent_to);
}
void BBloop() {

	// Define the interfaces where the message will be sent
	    uint8_t iface_mask = (1 << MY_TOP) | (1 << MY_BOTTOM);

	    // Message to send
	    char value[] = "hello";

	    // Send the multicast message
	    uint8_t sent_to = send_multicast_message(value, 6, iface_mask, 1);
	    if (sent_to > 0) {
	        setColor(BLUE);  // message successfully sent
	        sleep_sec(1);
	        setColor(PURPLE);
	        sleep_sec(2);
	    }
}

uint8_t process_standard_packet(L3_packet *packet) {
	return 0;
}

void process_standard_ack(L3_packet *p) {
}

void process_standard_unack(L3_packet *p) {
}
