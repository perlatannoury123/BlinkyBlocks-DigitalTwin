/*
 * user_code.c
 *
 *  Created on: oct. 21, 2022
 *      Author: Benoit Piranda
 */

#include <user_code.h>
#include <layer3_generic.h>
#include <microphone.h>
#include <speaker.h>
#include <light.h>
#include <abstraction.h>
#include <speaker.h>
#include <string.h>   // for strlen, snprintf
#include <stdint.h>   // for uint8_t, uint16_t, uint32_t



void BBinit() {
    setColor(GREEN);
}

/* Send a debug report to each connected neighbor using send_message()
   Each call to send_message must include 4 parameters:
   - target interface (uint8_t)
   - data buffer (uint8_t *)
   - size of buffer (uint16_t)
   - has_ack (1 = request ACK, 0 = no ACK)
*/
void send_debug_message(void) {
    char debug_msg[64];
    uint8_t connected_mask = 0;

    // Build connected mask
    for (uint8_t i = 0; i < 6; ++i) {
        if (is_connected(i)) {
            connected_mask |= (1 << i);
        }
    }

    // Compose message
    int n = snprintf(debug_msg, sizeof(debug_msg),
                     "BB debug: color=BLUE, conn=0x%02X", connected_mask);
    if (n < 0) return; // formatting error

    // Calculate message length (include null terminator)
    uint16_t msg_len = (uint16_t)((n < (int)sizeof(debug_msg)) ? n + 1 : sizeof(debug_msg));

    // Send to each connected interface
    for (uint8_t iface = 0; iface < 6; ++iface) {
        if (is_connected(iface)) {
            send_message(iface, (uint8_t *)debug_msg, msg_len, 1);
        }
    }

    // Also print locally for debugging
    printf("%s\n", debug_msg);
}

void BBloop() {
    static uint32_t last_debug_time = 0;
    uint32_t now = HAL_GetTick();

    // Send debug message every 2 seconds
    if (now - last_debug_time >= 2000) {
        last_debug_time = now;

        // Indicate visually
        setColor(BLUE);

        // Send the debug report
        send_debug_message();
    }
}

uint8_t process_standard_packet(L3_packet *packet) {
    // Optionally parse incoming debug messages here
    return 0;
}

void process_standard_ack(L3_packet *p) {
}

void process_standard_unack(L3_packet *p) {
}
